version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: health_surveillance_db
    environment:
      POSTGRES_DB: health_surveillance
      POSTGRES_USER: health_user
      POSTGRES_PASSWORD: health_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - health_network

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: health_surveillance_redis
    ports:
      - "6379:6379"
    networks:
      - health_network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: health_surveillance_api
    environment:
      DATABASE_URL: postgresql://health_user:health_password@postgres:5432/health_surveillance
      REDIS_URL: redis://redis:6379
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - ./ml_models:/app/ml_models
    networks:
      - health_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # React Dashboard
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: health_surveillance_dashboard
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8000/api
    volumes:
      - ./dashboard:/app
      - /app/node_modules
    networks:
      - health_network
    command: npm start

  # Celery Worker for background tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: health_surveillance_worker
    environment:
      DATABASE_URL: postgresql://health_user:health_password@postgres:5432/health_surveillance
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - ./ml_models:/app/ml_models
    networks:
      - health_network
    command: celery -A backend.celery_app worker --loglevel=info

  # IoT Sensor Simulator
  iot_sensors:
    build:
      context: .
      dockerfile: Dockerfile.iot
    container_name: health_surveillance_iot
    environment:
      API_ENDPOINT: http://backend:8000/api
    depends_on:
      - backend
    volumes:
      - ./iot_integration:/app
    networks:
      - health_network
    command: python water_sensor_client.py

  # SMS Gateway Service
  sms_gateway:
    build:
      context: .
      dockerfile: Dockerfile.sms
    container_name: health_surveillance_sms
    environment:
      API_ENDPOINT: http://backend:8000/api
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
    ports:
      - "8001:8001"
    depends_on:
      - backend
    volumes:
      - ./sms_service:/app
    networks:
      - health_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: health_surveillance_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - dashboard
    networks:
      - health_network

volumes:
  postgres_data:

networks:
  health_network:
    driver: bridge